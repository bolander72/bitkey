namespace core {};

[Error]
enum SecretKeyError {
  "InvalidSecretBytes",
};

interface SecretKey {
  [Throws=SecretKeyError]
  constructor(sequence<u8> secret_bytes);

  Signature sign_message(sequence<u8> message);

  PublicKey as_public();
};

enum WsmContext {
  "DeriveKeyV1",
  "CreateKeyV1",
};

[Error]
enum WsmIntegrityVerifierError {
  "MalformedSignature",
  "MalformedPublicKey",
  "Base58DecodeFailure",
  "Base16DecodeFailure",
};

interface WsmIntegrityVerifier {
  constructor(PublicKey pubkey);
  [Throws=WsmIntegrityVerifierError]
  boolean verify(string base58_message, string signature);
};

[Error]
enum InvoiceError {
  "InvalidInvoiceFormat",
  "InvalidPaymentHash"
};

interface Invoice {
  [Throws=InvoiceError]
  constructor(string invoice_string);
  Sha256 payment_hash();
  PublicKey? payee_pubkey();
  boolean is_expired();
  u64? amount_msat();
};

[Custom]
typedef string Sha256;

[Custom]
typedef string PublicKey;

[Custom]
typedef string Signature;

interface Secp256k1SharedSecret {
  constructor([ByRef] PublicKey point, [ByRef] SecretKey scalar);
  bytes secret_bytes();
};

[Error]
enum HkdfError {
  "ExpandError",
};

interface Hkdf {
  constructor([ByRef] bytes salt, [ByRef] bytes ikm);
  [Throws=HkdfError]
  bytes expand([ByRef] bytes info, i32 len);
};

enum ChaCha20Poly1305Error {
  "XChaCha20InstantiationError",
  "EncryptError",
  "DecryptError",
};

interface XChaCha20Poly1305 {
  [Throws=ChaCha20Poly1305Error]
  constructor([ByRef] bytes key);

  [Throws=ChaCha20Poly1305Error]
  bytes encrypt([ByRef] bytes nonce, [ByRef] bytes plaintext, [ByRef] bytes aad);

  [Throws=ChaCha20Poly1305Error]
  bytes decrypt([ByRef] bytes nonce, [ByRef] bytes ciphertext, [ByRef] bytes aad);
};

[Error]
enum Spake2Error {
  "ContextCreationError",
  "LengthError",
  "GenerateMessageError",
  "ProcessMessageError",
  "InvalidName",
  "HkdfError",
  "MacError",
  "InvalidRole",
};

interface Spake2Context {
  [Throws=Spake2Error]
  constructor(Spake2Role my_role, string my_name, string their_name);

  [Throws=Spake2Error]
  bytes generate_msg(bytes password);

  [Throws=Spake2Error]
  Spake2Keys process_msg(bytes their_msg, bytes? aad);

  [Throws=Spake2Error]
  bytes generate_key_conf_msg([ByRef] Spake2Keys keys);

  [Throws=Spake2Error]
  void process_key_conf_msg(bytes received_mac, [ByRef] Spake2Keys keys);

  bytes read_private_key();

  bytes read_public_key();

  [Throws=Spake2Error]
  void write_key_pair(bytes private_key, bytes public_key);
};

dictionary Spake2Keys {
  bytes alice_encryption_key;
  bytes bob_encryption_key;
  bytes alice_conf_key;
  bytes bob_conf_key;
};

enum Spake2Role {
  "Alice",
  "Bob",
};

[Error]
enum SignatureVerifierError {
  "Secp256k1Error",
};

interface SignatureVerifier {
  [Throws=SignatureVerifierError]
  constructor([ByRef] bytes signature);

  [Throws=SignatureVerifierError]
  void verify_ecdsa([ByRef] bytes message, [ByRef] bytes pubkey);
};

[Error]
enum CryptoBoxError {
  "CryptoBoxInstantiationError",
  "EncryptError",
  "DecryptError",
};

interface CryptoBox {
  [Throws=CryptoBoxError]
  constructor([ByRef] bytes public_key, [ByRef] bytes secret_key);

  [Throws=CryptoBoxError]
  bytes encrypt([ByRef] bytes nonce, [ByRef] bytes plaintext);

  [Throws=CryptoBoxError]
  bytes decrypt([ByRef] bytes nonce, [ByRef] bytes ciphertext);
};

interface CryptoBoxKeyPair {
  constructor();

  bytes public_key();

  bytes secret_key();
};

[Error]
enum KeygenError {
  "MissingSharePackage",
  "MissingShareAggParams",
  "InvalidParticipantIndex",
  "InvalidProofOfKnowledge",
  "InvalidIntermediateShare",
  "InvalidKeyCommitments",
};

interface SharePackage {};
interface ShareDetails {};
interface KeyCommitments {};

interface ShareGenerator {
  constructor();

  [Throws=KeygenError]
  SharePackage generate();
  [Throws=KeygenError]
  ShareDetails aggregate(SharePackage peer_share_package, KeyCommitments peer_key_commitments);
};
